{% extends "layout.twig" %}

{% block title %}
Weak ordering graph of coxeter group $W = {{ group.name | default('-') }}$ with automorphism $\theta = {{ automorphism.display_name }}$
{% endblock %}

{% block content %}
<div id="workspace" class="workspace">
    <div id="controls" class="workspace-controls">
        <div>
            <button class="btn" data-workspace-clickbind="reset">Reset positions</button>
            <button class="btn" data-workspace-clickbind="unhide">Unhide all nodes</button>
        </div>
        <div>
        	<div>
        		$\rho \in [$ <input id="rho-range" type="text" data-workspace-changebind="redraw" value="0,4" style="width: 65px;" /> $]$
        	</div>
        </div>
    </div>
    <div id="content" class="workspace-content">
       <div id="canvas"></div>
    </div>
</div>
<script type="text/javascript">
$(function () {
	var graph = null;
	var verticesRaw = [];
	var edgesRaw = [];
	
	var redraw = function () {
		graph.clear();
		
		var rhoRange = $('#rho-range').val().split(/,/);
		if (rhoRange.length != 2 || isNaN(rhoRange[0].trim()) || isNaN(rhoRange[1].trim())) {
			alert("Please enter a range like [0,10]");
			return;
		}
		var rhoMin = parseInt(rhoRange[0].trim());
		var rhoMax = parseInt(rhoRange[1].trim());
		
        $.each(verticesRaw, function (i, v) {
	    	if (v[0] < rhoMin || v[0] > rhoMax) return;
	    	
	        graph.addVertex(v[1], { label: v[1], twistedLength: v[0], click: function(vertex, event) {
	            if (event.ctrlKey) {
	                graph.hideAll();
	
	                graph.walk(vertex, {
	                    direction: -1,
	                    vertexCallback: function (v) { v.show(); },
	                    edgeCallback: function (e) { e.show(); }
	                });
	            }
	
	            if (event.shiftKey) {
	                graph.hideAll();
	
	                graph.walk(vertex, {
	                    direction: 1,
	                    vertexCallback: function (v) { v.show(); },
	                    edgeCallback: function (e) { e.show(); }
	                });
	            }
	        }});
		});

	    $.each(edgesRaw, function (i, e) {
	    	var source = verticesRaw[e[0]];
	    	var target = verticesRaw[e[1]];
	
			if (source[0] < rhoMin || source[0] > rhoMax || target[0] < rhoMin || target[0] > rhoMax) return;
	
	        graph.addEdge(source[1], target[1], { label: e[2], type: e[3] });
	    });
	
	    GraphLayout.WeakOrdering.layout(graph);
	    graph.resetViewPort();
	    
	    console.log(graph);
	    graph.draw();
	};
	
    $.ajax('/api/v1/weakordering/{{ automorphism.id }}/graph', {
        'dataType': 'json',
        'method': 'GET',
        success: function (data) {
            if (data === false) {
                $('#canvas').html('Weak ordering has not been calculated yet!');
                return;
            }

            verticesRaw = data[0];
            edgesRaw = data[1];

            graph = new Graph($('#canvas')[0]);

            $('#workspace').workspace({
                toggleFullscreen: function () { graph.updateViewPort(); },
                resetViewPort: function () { graph.resetViewPort(); },
                zoomIn: function () { graph.zoomIn(); },
                zoomOut: function () { graph.zoomOut(); },
                panUp: function () { graph.panUp(); },
                panDown: function () { graph.panDown(); },
                panLeft: function () { graph.panLeft(); },
                panRight: function () { graph.panRight(); },

                reset: function () {
                	GraphLayout.WeakOrdering.layout(graph);
                	graph.draw();
                },
                unhide: function () {
                    graph.showAll();
                },
                redraw: function () {
                	redraw();
                }
            });

			redraw();
        },
        error: function (err) {
            alert(err);
        }
    });
});
</script>
{% endblock %}