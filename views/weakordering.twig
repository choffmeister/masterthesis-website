{% extends "layout.twig" %}

{% block title %}
Weak ordering graph of coxeter group $W = {{ group.name | default('-') }}$ with automorphism $\theta = {{ automorphism.display_name }}$
{% endblock %}

{% block content %}
<div id="workspace" class="workspace">
    <div id="controls" class="workspace-controls">
        <div>
            <button class="btn" data-workspace-bind="reset">Reset positions</button>
            <button class="btn" data-workspace-bind="unhide">Unhide all nodes</button>
        </div>
    </div>
    <div id="content" class="workspace-content">
       <div id="canvas"></div>
    </div>
</div>
<script type="text/javascript">
$(function () {
    $.ajax('/api/v1/weakordering/{{ automorphism.id }}/graph', {
        'dataType': 'json',
        'method': 'GET',
        success: function (data) {
            if (data === false) {
                $('#canvas').html('Weak ordering has not been calculated yet!');
                return;
            }

            var vertices = data[0];
            var edges = data[1];

            var graph = new Graph($('#canvas')[0]);

            $('#workspace').workspace({
                toggleFullscreen: function () { graph.updateViewPort(); },
                resetViewPort: function () { graph.resetViewPort(); },
                zoomIn: function () { graph.zoomIn(); },
                zoomOut: function () { graph.zoomOut(); },
                panUp: function () { graph.panUp(); },
                panDown: function () { graph.panDown(); },
                panLeft: function () { graph.panLeft(); },
                panRight: function () { graph.panRight(); },

                reset: function () {
                	GraphLayout.WeakOrdering.layout(graph);
                	graph.draw();
                },
                unhide: function () {
                    graph.showAll();
                }
            })

            $.each(vertices, function (i, v) {
                graph.addVertex(v[1], { label: v[1], twistedLength: v[0], click: function(vertex, event) {
                    if (event.ctrlKey) {
                        graph.hideAll();

                        graph.walk(vertex, {
                            direction: -1,
                            vertexCallback: function (v) { v.show(); },
                            edgeCallback: function (e) { e.show(); }
                        });
                    }

                    if (event.shiftKey) {
                        graph.hideAll();

                        graph.walk(vertex, {
                            direction: 1,
                            vertexCallback: function (v) { v.show(); },
                            edgeCallback: function (e) { e.show(); }
                        });
                    }
                }});
            });
            $.each(edges, function (i, e) {
                graph.addEdge(vertices[e[0]][1], vertices[e[1]][1], { label: e[2], type: e[3] });
            });

            GraphLayout.WeakOrdering.layout(graph);
            graph.resetViewPort();
            
            console.log(graph);
            graph.draw();
        },
        error: function (err) {
            alert(err);
        }
    });
});
</script>
{% endblock %}