{% extends "layout.twig" %}

{% block title %}
Weak ordering graph of coxeter group $W = {{ group.name | default('-') }}$ with automorphism $\theta = 
{% for transposition in automorphism.transpositions %}
    (s_{{ transposition[0] }} s_{{ transposition[1] }})
{% else %}
    \textrm{id}
{% endfor %}
$
{% endblock %}

{% block content %}
<div id="generators">Double click graph to switch fullscreen. </div>
<div id="canvas" class="graph"></div>
<script type="text/javascript">
$(function () {
    $.ajax('/weakordering/{{ group.id }}/{{ automorphism.id }}/graph.json', {
        'dataType': 'json',
        'method': 'GET',
        success: function (data) {
            if (data === false) {
                $('#canvas').html('Weak ordering has not been calculated yet!');
                return;
            }
            
            var generators = data[0];
            var vertices = data[1];
            var edges = data[2];
            
            var graph = new Graph($('#canvas')[0], 100, 100);
            $.each(vertices, function (i, v) {
                graph.addVertex(v[0], { label: v[0].replace(/[\*|s]/g, ''), twistedLength: v[1], click: function(vertex, event) {
                    graph.walk(graph.vertices['e'], {
                        vertexCallback: function (v) {
                            v.options.opacity = 0.1;
                        },
                        edgeCallback: function (e) {
                            e.options.opacity = 0.1;
                        }
                    });
                    
                    graph.walk(vertex, {
                        direction: -1,
                        vertexCallback: function (v) {
                            v.options.opacity = 1.0;
                        },
                        edgeCallback: function (e) {
                            e.options.opacity = 1.0;
                        }
                    });
                    
                    graph.draw();
                }});
            });
            $.each(edges, function (i, e) {
                graph.addEdge(vertices[e[0]][0], vertices[e[1]][0], { label: e[2], type: e[3] });
            });
            
            GraphLayout.WeakOrdering.layout(graph);
            
            $.each(generators, function (i, g) {
                var checkbox = $('<input type="checkbox" checked="checked" name="generators[]" value="' + (parseInt(g.replace(/s/g, '')) - 1) + '" />');
                
                checkbox.change(function () {
                    
                    var selectedGenerators = new Array();
                    $("input[@name='generators[]']:checked").each(function() { selectedGenerators.push(parseInt($(this).val())); });

                    var subGraph = function (I) {
                        graph.walk(graph.vertices["e"], {
                            vertexCallback: function (v) {
                                v.hide();
                            },
                            edgeCallback: function (e) {
                                e.hide();
                            }
                        });
                        
                        graph.walk(graph.vertices["e"], {
                            edgeSelector: function (e) {
                               return $.inArray(e.options.label, I) != -1;
                            },
                            vertexCallback: function (v) {
                                v.show();
                            },
                            edgeCallback: function (e) {
                                e.show();
                            }
                        });
                    };

                    subGraph(selectedGenerators);
                    graph.draw();
                });
                
                $('#generators').append(checkbox).append(' ' + g);
            });
            
            console.log(graph);
            graph.draw();
        },
        error: function (err) {
            alert(err);
        }
    });
});
</script>
{% endblock %}