{% extends "layout.twig" %}

{% block title %}
Weak ordering graph of coxeter group $W = {{ group.name | default('-') }}$ with automorphism $\theta = 
{% for transposition in automorphism.transpositions %}
    (s_{{ transposition[0] }} s_{{ transposition[1] }})
{% else %}
    \textrm{id}
{% endfor %}
$
{% endblock %}

{% block content %}
<div id="workspace" class="workspace">
    <div id="controls" class="workspace-controls">
       <div>
           <button id="fullscreen">Fullscreen</button>
           <button id="zoomin">+</button>
           <button id="zoomout">-</button>
           <button id="panup">⇡</button>
           <button id="pandown">⇣</button>
           <button id="panleft">⇠</button>
           <button id="panright">⇢</button>
       </div>
       <div>
           <button id="unhide">Unhide</button>
       </div>
    </div>
    <div id="content" class="workspace-content">
       <div id="canvas"></div>
    </div>
</div>
<script type="text/javascript">
$(function () {
    $.ajax('/weakordering/{{ group.id }}/{{ automorphism.id }}/graph.json', {
        'dataType': 'json',
        'method': 'GET',
        success: function (data) {
            if (data === false) {
                $('#canvas').html('Weak ordering has not been calculated yet!');
                return;
            }

            var generators = data[0];
            var vertices = data[1];
            var edges = data[2];

            var graph = new Graph($('#canvas')[0]);

            $.each(vertices, function (i, v) {
                graph.addVertex(v[0], { label: v[0].replace(/[\*|s]/g, ''), twistedLength: v[1], click: function(vertex, event) {
                    if (event.ctrlKey) {
                        graph.hideAll();

                        graph.walk(vertex, {
                            direction: -1,
                            vertexCallback: function (v) { v.show(); },
                            edgeCallback: function (e) { e.show(); }
                        });
                    }
                    
                    if (event.shiftKey) {
                        graph.hideAll();

                        graph.walk(vertex, {
                            direction: 1,
                            vertexCallback: function (v) { v.show(); },
                            edgeCallback: function (e) { e.show(); }
                        });
                    }
                }});
            });
            $.each(edges, function (i, e) {
                graph.addEdge(vertices[e[0]][0], vertices[e[1]][0], { label: e[2], type: e[3] });
            });

            GraphLayout.WeakOrdering.layout(graph);

            var generatorsControl = $('<div></div>');
            $.each(generators, function (i, g) {
                var checkbox = $('<input type="checkbox" checked="checked" name="generators[]" value="' + (parseInt(g.replace(/s/g, '')) - 1) + '" />');

                checkbox.change(function () {

                    var selectedGenerators = new Array();
                    $("input[@name='generators[]']:checked").each(function() { selectedGenerators.push(parseInt($(this).val())); });

                    var subGraph = function (I) {
                        graph.hideAll();

                        graph.walk(graph.vertices["e"], {
                            edgeSelector: function (e) {
                               return $.inArray(e.options.label, I) != -1;
                            },
                            vertexCallback: function (v) {
                                v.show();
                            },
                            edgeCallback: function (e) {
                                e.show();
                            }
                        });
                    };

                    subGraph(selectedGenerators);
                });

                generatorsControl.append('<div>').append(checkbox).append(' ' + g).append('</div>');
            });

            $('#controls').append(generatorsControl);
            $('#fullscreen').click(function () {
                $('#workspace').toggleClass('workspace-fullscreen');
                graph.updateViewPort();
            });

            $('#zoomin').click(function () { graph.zoomIn(); });
            $('#zoomout').click(function () { graph.zoomOut(); });
            $('#panup').click(function () { graph.panUp(); });
            $('#pandown').click(function () { graph.panDown(); });
            $('#panleft').click(function () { graph.panLeft(); });
            $('#panright').click(function () { graph.panRight(); });

            $(document).bind('keydown', function (event) {
                switch (event.keyCode) {
                   case 38:
                       graph.panUp();
                       return;
                   case 40:
                       graph.panDown();
                       return;
                   case 37:
                       graph.panLeft();
                       return;
                   case 39:
                       graph.panRight();
                       return;
                   case 107:
                       graph.zoomIn();
                       return;
                   case 109:
                       graph.zoomOut();
                       return;
                }
            });
            
            $('#canvas').bind('mousewheel', function (event) {
                var delta = event.originalEvent.wheelDelta;

                if (delta > 0) {
                    graph.zoomIn();
                } else {
                    graph.zoomOut();
                }

                return false;
            });

            $('#unhide').click(function () {
                $("input[@name='generators[]']:not(checked)").attr('checked', 'checked');
                graph.showAll();
            });

            console.log(graph);
            graph.draw();
        },
        error: function (err) {
            alert(err);
        }
    });
});
</script>
{% endblock %}