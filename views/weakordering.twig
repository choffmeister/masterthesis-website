{% extends "layout.twig" %}

{% block title %}
Weak ordering graph of coxeter group $W = {{ group.name | default('-') }}$ with automorphism $\theta = 
{% for transposition in automorphism.transpositions %}
    (s_{{ transposition[0] }} s_{{ transposition[1] }})
{% else %}
    \textrm{id}
{% endfor %}
$
{% endblock %}

{% block content %}
<div id="generators">Double click graph to switch fullscreen. </div>
<div id="canvas" class="graph"></div>
<script type="text/javascript">
$(function () {
    $.ajax('/weakordering/{{ group.id }}/{{ automorphism.id }}/graph.json', {
        'dataType': 'json',
        'method': 'GET',
        success: function (data) {
            if (data === false) {
                $('#canvas').html('Weak ordering has not been calculated yet!');
                return;
            }
            
            var generators = data[0];
            var vertices = data[1];
            var edges = data[2];
            
            var graph = new Graph($('#canvas')[0], 100, 100);
            $.each(vertices, function (i, v) {
                graph.addVertex(v[0], { label: v[0].replace(/[\*|s]/g, ''), twistedLength: v[1] });
            });
            $.each(edges, function (i, e) {
                graph.addEdge(vertices[e[0]][0], vertices[e[1]][0], { label: e[2] });
            });
            
            var layoutGraph = function () {
                var levels = {};
                var size = [0, 0];
                
                $.each(graph.vertices, function(i, v) {
                    if (!levels[v.options.twistedLength]) {
                        levels[v.options.twistedLength] = 0;
                    }

                    v.positionX = levels[v.options.twistedLength]++;
                    v.positionY = v.options.twistedLength;
                    
                    if (size[0] < levels[v.options.twistedLength]) size[0] = levels[v.options.twistedLength];
                    if (size[1] < v.options.twistedLength) size[1] = v.options.twistedLength;
                });
                
                graph.width = size[0] * 150;
                graph.height = size[1] * 150;
                graph.scale = new GraphScale.Linear(graph, -1, size[0], -1, size[1] + 1);
            };
            layoutGraph();
            
            $.each(generators, function (i, g) {
                var checkbox = $('<input type="checkbox" checked="checked" name="generators[]" value="' + (parseInt(g.replace(/s/g, '')) - 1) + '" />');
                
                checkbox.change(function () {
                    
                    var selectedGenerators = new Array();
                    $("input[@name='generators[]']:checked").each(function() { selectedGenerators.push(parseInt($(this).val())); });

                    var subGraph = function (I) {
                        graph.walk({
                            vertexCallback: function (v) {
                                v.hide();
                            },
                            edgeCallback: function (e) {
                                e.hide();
                            }
                        });
                        
                        graph.walk({
                            edgeSelector: function (e) {
                               return $.inArray(e.options.label, I) != -1;
                            },
                            vertexCallback: function (v) {
                                v.show();
                            },
                            edgeCallback: function (e) {
                                e.show();
                            }
                        });
                    };

                    subGraph(selectedGenerators);
                    graph.draw();
                });
                
                $('#generators').append(checkbox).append(' ' + g);
            });
            
            console.log(graph);
            graph.draw();
        },
        error: function (err) {
            alert(err);
        }
    });
});
</script>
{% endblock %}